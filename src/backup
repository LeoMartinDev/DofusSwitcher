<template>
    <v-layout row>
        <v-flex xs12>
            <v-container fluid>
                <v-list two-line v-if="processes.length > 0">
                    <draggable v-model="processes" @end="onEndSorting">
                        <transition-group>
                            <v-list-tile v-for="item in processes" :key="item.id" @click="">
                                <v-list-tile-content>
                                    <v-list-tile-title v-text="item.mainWindowTitle"></v-list-tile-title>
                                </v-list-tile-content>
                                <v-list-tile-action>
                                    <v-btn icon ripple @click="focusWindow(item)">
                                        <v-icon color="grey">open_in_browser</v-icon>
                                    </v-btn>
                                </v-list-tile-action>
                                <v-list-tile-action>
                                    <v-menu offset-y transition="scale-transition" class="no-drag">
                                        <v-btn icon class="no-drag" slot="activator">
                                            <v-icon>more_vert</v-icon>
                                        </v-btn>
                                        <v-list>
                                            <v-list-tile avatar @click="">
                                                <v-list-tile-avatar>
                                                    <v-icon>settings</v-icon>
                                                </v-list-tile-avatar>
                                                <v-list-tile-title>Param√®tres</v-list-tile-title>
                                            </v-list-tile>
                                            <v-list-tile avatar @click="terminate(item)">
                                                <v-list-tile-avatar>
                                                    <v-icon>close</v-icon>
                                                </v-list-tile-avatar>
                                                <v-list-tile-title>Fermer</v-list-tile-title>
                                            </v-list-tile>
                                        </v-list>
                                    </v-menu>
                                </v-list-tile-action>
                            </v-list-tile>
                        </transition-group>
                    </draggable>
                </v-list>
            </v-container>
        </v-flex>
    </v-layout>
</template>

<script>
  import SystemInformation from './LandingPage/SystemInformation';
  import draggable from 'vuedraggable';
  import {remote} from 'electron';
  import v4 from 'uuid';
  import DofusWindowsEvent from './DofusWindowsEvent';
  import Vue from 'vue';
  import { mapGetters, mapMutations } from 'vuex';

  let nextShortcut = null;
  let previousShortcut = null;

  const dofusEvents = new DofusWindowsEvent();

  export default {
    name: 'characters-list-page',
    components: {SystemInformation, draggable},
    mounted() {
      dofusEvents.on('new-window',
      dofusEvents.on('login', process => {
        if (!this.currentProcess) {
          this.currentProcess = process.id;
        }
        this.processes.push(process);
      });
      dofusEvents.on('logout', process => {
        let index = this.processes.findIndex(value => value.id === process.id);

        if (index > -1) this.$delete(this.processes, index);
      });
      dofusEvents.on('close', process => {
        let index = this.processes.findIndex(value => value.id === process.id);

        if (index > -1) this.$delete(this.processes, index);
      });
        nextShortcut = remote.globalShortcut.register('CommandOrControl+n', () => {
          console.log('Next : isLocked :: ', this.isLocked)
          if (!this.isLocked) {
            this.isLocked = true;
            this.focusNextWindow();
          }
        });
        previousShortcut = remote.globalShortcut.register('CommandOrControl+,', () => {
          console.log('previous')
          if (!this.isLocked) {
            this.isLocked = true;
            this.focusPreviousWindow();
          }
        });
    },
    methods: {
      terminate(process) {
        if (process && process.terminate) {
          process.terminate();
        }
      },
      onEndSorting(event) {
  /*              let oldValue = this.orderList[event.oldIndex];
                this.orderList[event.oldIndex] = this.orderList[event.newIndex];
                Vue.set(this.orderList, event.newIndex, oldValue);*/
      },
      open(link) {
        this.$electron.shell.openExternal(link);
      },
      focusWindow(process) {
        if (process && process.setToForeground) {
        }
      },
      focusNextWindow() {
        let currentIndex = this.processes.findIndex(p => p.id === this.currentProcess);
        if (currentIndex + 1 > this.processes.length - 1) {
          currentIndex = 0;
        } else {
          currentIndex++;
        }
        let process = this.processes.find(p => p.id === this.processes[currentIndex].id);
        if (process && process.setToForeground) {
          this.currentProcess = process.id;
        }
        this.isLocked = false;
      },
      focusPreviousWindow() {
        let currentIndex = this.processes.findIndex(p => p.id === this.currentProcess);

        if (currentIndex - 1 < 0) {
          currentIndex = this.processes.length - 1;
        } else {
          currentIndex--;
        }
        let process = this.processes.find(p => p.id === this.processes[currentIndex].id);
        if (process && process.setToForeground) {
          process.setToForeground();
          this.currentProcess = process.id;
        }
        this.isLocked = false;
      },
    },
    data() {
      return {
        isLocked: false,
        processes: [],
        currentProcess: null,
      }
    },
    computed: {
      ...mapGetters([
        'focusedProcess',
        'processes',
      ]),
    },
  };
</script>

<style>
    @import url('https://fonts.googleapis.com/css?family=Source+Sans+Pro');

    .no-drag {
        -webkit-app-region: no-drag;
    }

    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    body {
        font-family: 'Source Sans Pro', sans-serif;
    }

    #wrapper {
        background: radial-gradient(
                ellipse at top left,
                rgba(255, 255, 255, 1) 40%,
                rgba(229, 229, 229, .9) 100%
        );
        height: 100vh;
        padding: 60px 80px;
        width: 100vw;
    }

    #logo {
        height: auto;
        margin-bottom: 20px;
        width: 420px;
    }

    main {
        display: flex;
        justify-content: space-between;
    }

    main > div {
        flex-basis: 50%;
    }

    .left-side {
        display: flex;
        flex-direction: column;
    }

    .welcome {
        color: #555;
        font-size: 23px;
        margin-bottom: 10px;
    }

    .title {
        color: #2c3e50;
        font-size: 20px;
        font-weight: bold;
        margin-bottom: 6px;
    }

    .title.alt {
        font-size: 18px;
        margin-bottom: 10px;
    }

    .doc p {
        color: black;
        margin-bottom: 10px;
    }

    .doc button {
        font-size: .8em;
        cursor: pointer;
        outline: none;
        padding: 0.75em 2em;
        border-radius: 2em;
        display: inline-block;
        color: #fff;
        background-color: #4fc08d;
        transition: all 0.15s ease;
        box-sizing: border-box;
        border: 1px solid #4fc08d;
    }

    .doc button.alt {
        color: #42b983;
        background-color: transparent;
    }
</style>
